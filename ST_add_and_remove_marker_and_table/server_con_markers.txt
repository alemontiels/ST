-- server.R

library(leaflet)
library(RColorBrewer)
library(scales)
library(lattice)
library(dplyr)
library(rsconnect)
# Leaflet bindings are a bit slow; for now we'll just sample to compensate
#set.seed(100)
#zipdata <- allzips[sample.int(nrow(allzips), 50),]
# By ordering by centile, we ensure that the (comparatively rare) SuperZIPs
# will be drawn last and thus be easier to see
#zipdata <- zipdata[order(zipdata$centile),]

function(input, output, session) {
  
  ## chooser
  output$selection <- renderPrint(
    input$mychooser
  )
  
  
##------------------  UPLOADING FILE ------------------------------
  
  output$contents <- renderTable({
    
    # input$file1 will be NULL initially. After the user selects
    # and uploads a file, head of that data file by default,
    # or all rows if selected, will be shown.
    
    req(input$file1)
    
    df <- read.csv(input$file1$datapath,
                   header = input$header,
                   sep = input$sep,
                   quote = input$quote)
    
    if(input$disp == "head") {
      return(head(df))
    }
    else {
      return(df)
    }
    
  })
  #####------------------ DOwnloading
  
  # Reactive value for selected dataset ----
  datasetInput <- reactive({
    switch(input$dataset,
           "Datos de superzip en EUA" = cars)
  })
  
  # Table of selected dataset ----
  output$table <- renderTable({
    datasetInput()
  })
  
  # Downloadable csv of selected dataset ----
  output$downloadData <- downloadHandler(
    filename = function() {
      paste(input$dataset, ".csv", sep = "")
    },
    content = function(file) {
      write.csv(datasetInput(), file, row.names = FALSE)
    }
  )
  
  ## Interactive Map ###########################################

  # Create the map
  output$map <- renderLeaflet({
    leaflet() %>%
      addTiles(
        urlTemplate = "//{s}.tiles.mapbox.com/v3/jcheng.map-5ebohr46/{z}/{x}/{y}.png",
        attribution = 'Maps by <a href="http://www.mapbox.com/">Mapbox</a>'
      ) %>%
      setView(lng = 115.2126293, lat = -8.670458199999999, zoom = 12)
   # addMarkers(allzips=allzips, lng=~longitude, lat=~latitude, popup=~name)
  })

  # A reactive expression that returns the set of zips that are
  # in bounds right now
  #zipsInBounds <- reactive({
   # if (is.null(input$map_bounds))
    #  return(zipdata[FALSE,])
    #bounds <- input$map_bounds
    #latRng <- range(bounds$north, bounds$south)
    #lngRng <- range(bounds$east, bounds$west)

    #subset(zipdata,
     # latitude >= latRng[1] & latitude <= latRng[2] &
      #  longitude >= lngRng[1] & longitude <= lngRng[2])
  #})

  # Precalculate the breaks we'll need for the two histograms --- lo pongo # para no mostrarlos --Inicio (*)
 # centileBreaks <- hist(plot = FALSE, allzips$centile, breaks = 20)$breaks

  #output$histCentile <- renderPlot({
    # If no zipcodes are in view, don't plot
   # if (nrow(zipsInBounds()) == 0)
    #  return(NULL)

    #hist(zipsInBounds()$centile,
     # breaks = centileBreaks,
      #main = "Score",
      #xlab = "Percentile",
      #xlim = range(allzips$centile),
      #col = '#f2e394',
      #border = 'black')
  #})    

  #output$scatterCollegeIncome <- renderPlot({
    # If no zipcodes are in view, don't plot
   # if (nrow(zipsInBounds()) == 0)
    #  return(NULL)

    #print(xyplot(income ~ college, data = zipsInBounds(), xlim = range(allzips$college), ylim = range(allzips$income)))
  # })---  fin (*)
  
  # This observer is responsible for maintaining the circles and legend,
  # according to the variables the user has chosen to map to color and size.
  #observe({ inicio (/)
   # colorBy <- input$color
    #sizeBy <- input$size

    #if (colorBy == "superzip") {
      # Color and palette are treated specially in the "superzip" case, because
      # the values are categorical instead of continuous.
     # colorData <- ifelse(zipdata$centile >= (100 - input$threshold), "yes", "no")
      #pal <- colorFactor("viridis", colorData)
    #} else {
     # colorData <- zipdata[[colorBy]]
      #pal <- colorBin("viridis", colorData, 7, pretty = FALSE)
    #}

    #if (sizeBy == "superzip") {
      # Radius is treated specially in the "superzip" case.
     # radius <- ifelse(zipdata$centile >= (100 - input$threshold), 30000, 3000)
    #} else {
     # radius <- zipdata[[sizeBy]] / max(zipdata[[sizeBy]]) * 30000
    #}  fin (/)

    #leafletProxy("map", data = zipdata) %>%
     # clearShapes() %>%
      #addCircles(~longitude, ~latitude, radius=radius, layerId=~zipcode,
       # stroke=FALSE, fillOpacity=0.4, fillColor=pal(colorData)) %>%
      #addLegend("bottomleft", pal=pal, values=colorData, title=colorBy,
       # layerId="colorLegend")
  #}) fin (/)
  leafletProxy("map", data = allzips) %>%
     clearShapes() %>%
   addMarkers(lng=~longitude, lat=~latitude, popup=~paste("<h6>","#",code,"</h6>","<strong>Hospital:</strong>",name))

  # Show a popup at the given location
  #showZipcodePopup <- function(code, lat, lng) {
   # selectedZip <- allzips[allzips$code == code,]
    #content <- as.character(tagList(
     # tags$h4("Hospital:", as.integer(selectedZip$name)),
      #tags$strong(HTML(sprintf("%s, %s %s",
       # selectedZip$selectedZip$code
      #))), tags$br(),
     # sprintf("Median household income: %s", dollar(selectedZip$income * 1000)), tags$br(),
      #sprintf("Percent of adults with BA: %s%%", as.integer(selectedZip$college)), tags$br(),
      #sprintf("Name: %s", selectedZip$name)
    #))
    #leafletProxy("map") %>% addPopups(lng, lat, content, layerId = code)
  #}

  # When map is clicked, show a popup with city info
  observe({
    leafletProxy("map") %>% clearPopups()
    event <- input$map_shape_click
    if (is.null(event))
      return()

    isolate({
      showZipcodePopup(event$id, event$lat, event$lng)
    })
  })


  ## Data Explorer ###########################################

  observe({
    cities <- if (is.null(input$states)) character(0) else {
      filter(cleantable, State %in% input$states) %>%
        `$`('City') %>%
        unique() %>%
        sort()
    }
    stillSelected <- isolate(input$cities[input$cities %in% cities])
    updateSelectInput(session, "cities", choices = cities,
      selected = stillSelected)
  })

  observe({
    zipcodes <- if (is.null(input$states)) character(0) else {
      cleantable %>%
        filter(State %in% input$states,
          is.null(input$cities) | City %in% input$cities) %>%
        `$`('Zipcode') %>%
        unique() %>%
        sort()
    }
    stillSelected <- isolate(input$zipcodes[input$zipcodes %in% zipcodes])
    updateSelectInput(session, "zipcodes", choices = zipcodes,
      selected = stillSelected)
  })

  observe({
    if (is.null(input$goto))
      return()
    isolate({
      map <- leafletProxy("map")
      map %>% clearPopups()
      dist <- 0.5
      zip <- input$goto$zip
      lat <- input$goto$lat
      lng <- input$goto$lng
      showZipcodePopup(zip, lat, lng)
      map %>% fitBounds(lng - dist, lat - dist, lng + dist, lat + dist)
    })
  })

  output$ziptable <- DT::renderDataTable({
    df <- cleantable %>%
      filter(
        Score >= input$minScore,
        Score <= input$maxScore,
        is.null(input$states) | State %in% input$states,
        is.null(input$cities) | City %in% input$cities,
        is.null(input$zipcodes) | Zipcode %in% input$zipcodes
      ) %>%
      mutate(Action = paste('<a class="go-map" href="" data-lat="', Lat, '" data-long="', Long, '" data-zip="', Zipcode, '"><i class="fa fa-crosshairs"></i></a>', sep=""))
    action <- DT::dataTableAjax(session, df)

    DT::datatable(df, options = list(ajax = list(url = action)), escape = FALSE)
  })
}

